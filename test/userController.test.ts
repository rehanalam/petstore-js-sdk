/**
 * Swagger Petstore - OpenAPI 3.0Lib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

import { UserController } from '../src';
import { testClient } from './testClient';
import { expectHeadersToMatch, makeApiCall } from './testHelper';

describe('UserController', () => {
  let controller : UserController;

  beforeAll(() => {
    controller = new UserController(testClient);
  });

  it('should Test createUser', async () => {
    const id = BigInt(10);

    const username = 'theUser';

    const firstName = 'John';

    const lastName = 'James';

    const email = 'john@email.com';

    const password = '12345';

    const phone = '12345';

    const userStatus = 1;

    const response = await makeApiCall(
      () => controller.createUser(
        id,
        username,
        firstName,
        lastName,
        email,
        password,
        phone,
        userStatus
      )
    );

    expect(response.statusCode).toBe(200);

    const expectedHeaders = { 'Content-Type': ['application/json', true] };

    expectHeadersToMatch(response.headers, expectedHeaders);
  });

  it('should Test createUser1', async () => {
    const id = BigInt(10);

    const username = 'theUser';

    const firstName = 'John';

    const lastName = 'James';

    const email = 'john@email.com';

    const password = '12345';

    const phone = '12345';

    const userStatus = 1;

    const response = await makeApiCall(
      () => controller.createUser(
        id,
        username,
        firstName,
        lastName,
        email,
        password,
        phone,
        userStatus
      )
    );

    expect(response.statusCode).toBe(200);

    const expectedHeaders = { 'Content-Type': ['application/xml', true] };

    expectHeadersToMatch(response.headers, expectedHeaders);
  });

  it('should Test createUsersWithListInput', async () => {
    const response = await makeApiCall(
      () => controller.createUsersWithListInput(undefined)
    );

    expect(response.statusCode).toBe(200);

    const expectedHeaders = { 'Content-Type': ['application/json', true] };

    expectHeadersToMatch(response.headers, expectedHeaders);
  });

  it('should Test createUsersWithListInput1', async () => {
    const response = await makeApiCall(
      () => controller.createUsersWithListInput(undefined)
    );

    expect(response.statusCode).toBe(200);

    const expectedHeaders = { 'Content-Type': ['application/xml', true] };

    expectHeadersToMatch(response.headers, expectedHeaders);
  });

  it('should Test loginUser', async () => {
    const response = await makeApiCall(
      () => controller.loginUser(undefined, undefined)
    );

    expect(response.statusCode).toBe(200);

    const expectedHeaders = {
      'X-Rate-Limit': ['', false],
      'X-Expires-After': ['', false],
      'Content-Type': ['application/xml', true],
    };

    expectHeadersToMatch(response.headers, expectedHeaders);
  });

  it('should Test loginUser1', async () => {
    const response = await makeApiCall(
      () => controller.loginUser(undefined, undefined)
    );

    expect(response.statusCode).toBe(200);

    const expectedHeaders = {
      'X-Rate-Limit': ['', false],
      'X-Expires-After': ['', false],
      'Content-Type': ['application/json', true],
    };

    expectHeadersToMatch(response.headers, expectedHeaders);
  });

  it('should Test logoutUser', async () => {
    const response = await makeApiCall(
      () => controller.logoutUser()
    );

    expect(response.statusCode).toBe(200);
  });
});
